~~~ 𝑺𝒐𝒎𝒆 𝑰𝒏𝒕𝒆𝒓𝒆𝒔𝒕𝒊𝒏𝒈 𝒑𝒓𝒐𝒃𝒍𝒆𝒎𝒔 𝒕𝒐 𝒘𝒐𝒓𝒌 𝒐𝒏 𝑷𝒐𝒊𝒏𝒕𝒆𝒓𝒔 𝒊𝒏 𝑪 ~~~

1. Write a program to find the size of a data type without using the `sizeof` operator, use pointer arithmetic.
(I/P: int, O/P: 4( based on platform))

2. Design a function that determines if two pointers point to the same array.
(I/P: int arr[] = {1,2,3,4}, *ptr1 = &arr[1], *ptr2 = &arr[3]; O/P: True )

3. Create a function that uses pointer arithmetic to count the number of elements in an array without utilizing loop constructs.
(I/P: int arr[] = {1,2,3,4,5} ,O/P: 5 )

4. Implement a program that swaps two strings using pointers to pointers.
(I/P: char *str1 = "hello", *str2 = "world" ,O/P: str1 = "world", str2 = "hello" )

5. Create a function that segregates even and odd values of an integer array using pointers.
(I/P: int arr[] = {12,34,9,8,45,90} ,O/P: {12,34,8,90,9,45} )

6. Design a program to concatenate two strings without using standard library functions, only pointers.
(I/P: char *str1 = "Good ", *str2 = "Morning" ,O/P: "Good Morning" )

7. Implement a function that splits a string into two halves and returns pointers to the beginning of each half.
(I/P: "HelloWorld" ,O/P: "Hello", "World" )

8. Write a function that trims leading and trailing whitespace from a string using pointers.
(I/P: " Hello World " ,O/P: "Hello World" )

9. Design a program to find the overlapping part of two arrays using pointers.
(I/P: int arr1[] = {1,2,3,4,5,6}, arr2[] = {5,6,7,8} ,O/P: {5,6} )

10. Create a function that rotates an array to the right by `k` elements using pointers.
(I/P: int arr[] = {1,2,3,4,5}, k=2 ,O/P: {4,5,1,2,3} )

11. Implement a function that merges two sorted arrays into a third array using pointers.
(I/P: int arr1[] = {1,3,5}, arr2[] = {2,4,6} ,O/P: {1,2,3,4,5,6} )

12. Design a program that checks if a string is a prefix of another string using pointers.
(I/P: char *str1 = "Hello", *str2 = "Hel" ,O/P: True )

13. Write a function that converts a string to lowercase using pointers.
(I/P: "HELLO" ,O/P: "hello" )

14. Implement a program that finds the first non-repeated character in a string using pointers.
(I/P: "swiss" ,O/P: 'w' )

15. Design a function that uses pointers to find the intersection of two arrays.(I/P: int arr1[] = {1,2,3,4}, arr2[] = {3,4,5,6} ,O/P: {3,4} )

16. Create a program that checks if a string is a palindrome using pointers.
(I/P: "radar" ,O/P: True)

17. Write a function to calculate the dot product of two vectors using pointers.
(I/P: int vec1[] = {1,2,3}, vec2[] = {4,5,6} ,O/P: 32 )

18. Design a program that finds the length of a linked list using double pointers.
(I/P:1->2->3->4->5 ,O/P:5 )

19. Implement a function that finds the common elements in three sorted arrays using pointers.
(I/P: int arr1[] = {1,5,10,20,40,80}, arr2[] = {6,7,20,80,100}, arr3[] = {3,4,15,20,30,70,80,120} ,O/P:{20,80} )

20. Create a program that flattens a 2D array into a 1D array using pointers.
(I/P:int arr[][] = {{1,2},{3,4}} ,O/P:{1,2,3,4} )