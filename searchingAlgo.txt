Solve to Resolve: Unveil the Power of Searching Algorithms Through These Hand-Picked Problems. Whether you're a novice or an expert, this curated list of challenges will sharpen your skills and deepen your understanding. Ready to search through these problems?

1) Linear Search in Array
- Description: Search for an element in an unsorted array.
- Algorithm: Linear search sequentially checks each element until the desired element is found or the array ends.
- I/P: [5, 2, 9, 1, 5, 6], 9 ; O/P: 2

2) Binary Search in Sorted Array
- Description: Search for an element in a sorted array.
- Algorithm: Binary search divides the array into halves and compares the middle element to the target.
- I/P: [1, 2, 3, 4, 5], 4 ; O/P: 3

3) Recursive Binary Search
- Description: Implement binary search recursively.
- Algorithm: Recursive binary search reduces the problem size by half in each recursive call.
- I/P: [1, 2, 3, 4, 5], 3 ; O/P: 2

4) Interpolation Search
- Description: Implement interpolation search on a sorted array.
- Algorithm: Interpolation search tries to find the position of the target value by using a probing formula.
- I/P: [1, 2, 3, 4, 5], 4 ; O/P: 3

5) Exponential Search
- Description: Use exponential search to find an element in a sorted array.
- Algorithm: Exponential search involves two steps: finding a range where the element is likely to be and applying binary search.
- I/P: [1, 2, 3, 4, 5], 3 ; O/P: 2

6) Jump Search
- Description: Implement jump search.
- Algorithm: Jump search skips ahead by fixed steps and performs a linear search backward.
- I/P: [1, 3, 5, 7, 9], 7 ; O/P: 3

7) Fibonacci Search
- Description: Implement Fibonacci search on a sorted array.
- Algorithm: Fibonacci search divides the array into unequal parts based on Fibonacci numbers.
- I/P: [1, 2, 3, 4, 5], 2 ; O/P: 1

8) Sentinel Search
- Description: Implement sentinel search on an unsorted array.
- Algorithm: Sentinel search uses a sentinel value to avoid the boundary check.
- I/P: [5, 2, 9, 1, 5, 6], 1 ; O/P: 3

9) Ternary Search
- Description: Implement ternary search on a sorted array.
- Algorithm: Ternary search divides the array into three parts and compares the key with the two midpoints.
- I/P: [1, 2, 3, 4, 5], 1 ; O/P: 0

10) Find Element in Rotated Array
- Description: Search an element in a sorted and rotated array.
- Algorithm: Modified binary search.
- I/P: [3, 4, 5, 1, 2], 1 ; O/P: 3

11) Find Peak Element
- Description: Find a peak element in an array.
- Algorithm: Use binary search to find a peak element.
- I/P: [1, 3, 5, 4, 2] ; O/P: 5

12) Missing Number in Array
- Description: Find the missing number in an array of 1 to N.
- Algorithm: Use binary search or mathematical formula.
- I/P: [1, 2, 4, 6, 5, 7, 8] ; O/P: 3

13) First and Last Occurrence
- Description: Find the first and last occurrence of an element in a sorted array.
- Algorithm: Modified binary search.
- I/P: [2, 2, 2, 2, 2], 2 ; O/P: First = 0, Last = 4

14) Find Fixed Point
- Description: Find a fixed point (value equal to index) in a given array.
- Algorithm: Use binary search for a sorted array.
- I/P: [-10, -5, 1, 3, 7, 9, 12, 17] ; O/P: 3

15) Count Occurrences in Sorted Array
- Description: Count occurrences of a number in a sorted array.
- Algorithm: Modified binary search to find the first and last occurrences.
- I/P: [2, 2, 2, 2, 2], 2 ; O/P: 5